function diff = binding_cost(kopt, kopt_names, kin, kin_names, ...
    data, basis, calc, ab, recep, setup, m, p)

% BINDING_COST	Cost function for binding model parameter optimization.
%
%	Sets up the cost function for the optimization of the antibody-receptor
%   binding rate constants from the flow cytometry equilibrium binding
%   data. Calls on binding_sim for the ODE solver; used by lsqnonlin in
%   binding_opt file.
%
%	USAGE:
%		DIFF = BINDING_COST(KOPT, KOPT_NAMES, KIN, KIN_NAMES, ...
%           DATA, BASIS, CALC, AB, RECEP, SETUP, M, P)
%
%	INPUT:
%       KOPT = initial guesses for the parameter(s) to be optimized
%
%       KOPT_NAMES = string vector with the regular expression patterns or
%       names for each parameter to be optimized
%
%       KIN = vector with values for the parameters not being optimized
%
%       KIN_NAMES = string vector with the regular expression patterns or
%       names for each parameter not being optimized
%
%       DATA = normalized data points for the experimental data, input as a
%       long form table with columns for the concentration, species, cell
%       type, replicate number, value, and normalization flag; generated by
%       IMPORT_DATA; multiple data sets can be input as a cell array of
%       tables
%
%       BASIS = string with which species were used as the basis for
%       normalizing the data; options are ["Ab", "BS1"]
%
%       CALC = string with which normalization calculation was used for the
%       data; options are ["data", "max"]
%
%       AB = a string vector with the antibodies to use in the complexes
%
%       RECEP = a cell array of string vectors with the receptor(s) to use
%       in the complexes; the rows of the array should correspond to the
%       antibodies in AB
%
%		SETUP = experimental design used, must be a string
%
%       M = structure containing the molecules included in the model and
%       their assigned numbers, input as a structure, correct naming for
%       species is antibody name or antibody receptor complex name (with
%       components separated by underscores)
%
%       P = structure containing parameters for the model, input as a
%       structure; correct naming for parameters is "kon_" or "koff_",
%       followed by the antibody name or antibody receptor complex name
%       (with components separated by underscores), ending with the
%       receptor being bound to; e.g., kon_BS1_6R_8R
%
%	OUTPUT:
%		DIFF = array of the difference between the simulation and the
%       experimental data at antibody concentration; rows = different
%       replicates, columns = different antibody concentrations, depth =
%       different antibody-receptor combinations
%
%	NOTES:
%	    p.alpha must be assigned before passing in P to this function
%	    because BINDING_SIM requires it to already be set. The SETUP_CASE
%	    function will handle that automatically when it creates M and P.
%
%       The IMPORT_DATA function will import a CSV file with the
%       experimental data and format it correctly for use in this function.
%
%       If multiple data sets are given as a cell array, this function will
%       run the model simulations for all concentrations given in any of
%       the data sets. NORM_OUTPUT will select the simulation
%       concentrations closest to the initial concentrations in each data
%       set for calculating the differences.
%
%       The "Ab" BASIS normalizes each antibody-cell line
%       combination separately. The "BS1" BASIS normalizes each
%       antibody to the BS1 concentrations in that cell line.
%
%       The "data" CALC normalizes the model output to the same
%       concentrations that were used in the experimental data (determined
%       by the normalization flag assigned when the data is imported by
%       IMPORT_DATA). The "max" CALC normalizes the model output to the
%       maximum binding of the input concentrations present in the
%       experimental data.
%
%	See also BINDING_OPT, BINDING_SIM, IMPORT_DATA, LSQNONLIN.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Argument Validation

arguments
    kopt (1,:) double
    kopt_names (1,:) {mustBeA(kopt_names, "string")}
    kin (1,:) double
    kin_names (1,:) {mustBeA(kin_names, "string")}
    data {mustBeA(data, ["table", "cell"])}
    basis string {mustBeMember(basis, ["Ab", "BS1"])}
    calc string {mustBeMember(calc, ["data", "max"])}
    ab string
    recep {mustBeA(recep, ["string", "cell"])}
    setup string
    m struct
    p struct
end

% Validate that the antibodies and receptors are the same length and
% convert the receptors to a cell array for correct indexing
[ab, recep] = validate_ab(ab, recep);

% If a single data table was passed in, wrap it in a cell array
if class(data) == "table"
    data = {data};
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Run Simulation

% -------------------- PARAMETERS --------------------
% Combine parameters to be optimized and static parameters
kvalues = [kopt, kin];
knames = [kopt_names, kin_names];

% Calculate the input parameter that was not provided using the
% thermodynamic cycle ratio
[kvalue, kname] = thermo_ratio(kvalues, knames);
kvalues = [kvalues, kvalue];
knames = [knames, kname];

% -------------------- INPUTS --------------------
% Antibody concentrations from experimental data
% This will combine the unique initial concentrations from all data sets;
% norm_output will select the concentrations closest to the concentrations
% from the data set for calculating the diff
concAb = cellfun(@(x) unique(x.Conc), data, 'UniformOutput', false);
concAb = unique(vertcat(concAb{:}));
concAb = [concAb, zeros(size(concAb))];

% Initialize initial concentration table
yin = cell(length(ab), 1);
id = 1;

% Generate initial concentrations for each antibody
for i = 1:length(ab)
    % Get time periods and receptor number
    % "nostruct" option prevents the function from generating m and p to
    % save time
    [~, ~, cond] = setup_case(setup, recep{i}, "nostruct");
    times = [0 cond.primary cond.primary + cond.secondary] * 3600;

    % Use setup_input to generate the initial concentrations table with the
    % antibody and receptor names and the time periods
    yin{i} = setup_input(id, ab(i), recep{i}, cond.ytype, times, ...
        ab(i), concAb, recep{i}, cond.recep);

    % Increment ID
    id = max(yin{i}.ConcID) + 1;
end

% Concatenate the concentration tables for each antibody
yin = vertcat(yin{:});

% Generate parameter table from input values
params = setup_input(1, knames, kvalues);

% Generate combined input ID table
id = setup_id(yin, params);

% -------------------- OUTPUTS --------------------
% Specify output calculation options
interest = "receptors"; value = "end"; add = 1; time = 0;
output = setup_output(interest, value, add, time);

% -------------------- SIMULATION --------------------
% Calculate output for each antibody
out = binding_sim(id, yin, params, output, m, p);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Normalize Values and Calculate Cost

% Initialize output cell array and counter
diff = cell(length(data), 1);

% Use normalization function to calculate the difference between the model
% output and the experimental data for each data set
for i = 1:length(data)
    [~, diff_i] = norm_output(out, id, yin, data{i}, basis, calc, ...
        [], "matrix");

    % Reshape diff into column array so there are not issues with different
    % numbers of concentrations
    diff{i} = reshape(diff_i, [], 1);
end

% Concatenate all diffs into a column array
diff = vertcat(diff{:});
