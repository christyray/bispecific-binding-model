function [id, yin, params] = split_inputs(n, id, yin, params)

% SPLIT_INPUTS	Split the simulation input variables into smaller parts.
%
%	Split the ID table, initial concentration table, and parameter value
%	table into separate tables to send to individual parallel workers for
%	model simulation. Splits the ID table into the number of requested
%	objects, then splits the initial concentrations and parameters based on
%	which IDs are in each ID split.
%
%	USAGE:
%		[ID, YIN, PARAMS] = SPLIT_INPUTS(N, ID, YIN, PARAMS)
%
%	INPUT:
%		N = number of divisions to split the tables into
%
%       ID = table with columns for the simulation ID, initial
%       concentration ID, and parameter value ID; used for connecting the
%       initial concentrations used for the simulation with the parameter
%       values used; generated by SETUP_ID
%
%		YIN = table with columns for the simulation ID, time period type,
%		starting and ending times for the time period, species name, and
%		initial concentration for that species for each time period;
%		generated by SETUP_INPUT
%
%       P = table with columns for the simulation ID, parameter name, and
%		parameter value for each parameter in the simulation; generated by
%       SETUP_INPUT
%
%	OUTPUT:
%		ID = cell array with the input ID table split into N separate
%		tables, each in a different cell
%
%       YIN = cell array with the input YIN table split into N separate
%		tables, each in a different cell
%
%       PARAMS = cell array with the input PARAMS table split into N
%       separate tables, each in a different cell
%
%	NOTES:
%		This is necessary because BINDING_SIM needs the corresponding
%		initial concentrations and parameter values for each simulation.
%		The ID table notes which intitial concentrations and parameters are
%		being used, but does not contain the actual values. If the YIN and
%		PARAMS tables were simply split with SPLIT_OBJECT, they may not
%		directly correspond to the IDs in the ID table.
%
%	See also SPLIT_OBJECT, PARFOR, BINDING_SIM.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Argument Validation

arguments
    n double
    id table
    yin table
    params table
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Split the Input Values into Separate Objects

% Split the ID table into the desired number of sub-tables to send to
% parallel workers
id = split_object(n, id);

% Split the initial concentrations and the parameters to match the
% simulation IDs from the ID sub-tables

% Setup anonymous function to use with cellfun for both tables
match_split = @(x, id, col) x(ismember(x{:,col}, id{:,col}), :);

% Iterate through the cells of the split ID table to generate the matching
% initial concentrations and parameters tables
yin = cellfun(@(id) match_split(yin, id, "ConcID"), id, ...
    'UniformOutput', false);
params = cellfun(@(id) match_split(params, id, "ParamID"), id, ...
    'UniformOutput', false);

end
